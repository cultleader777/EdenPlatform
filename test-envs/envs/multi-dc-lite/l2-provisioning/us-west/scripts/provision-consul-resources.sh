#!/bin/sh

ORIGINAL_B64=$( echo -n PGh0bWw+CjxoZWFkPgo8L2hlYWQ+Cjxib2R5Pgo8aDE+RWRlbiBQbGF0Zm9ybSBhZG1pbiBwYW5lbDwvaDE+CjxoMz5BbGVydG1hbmFnZXI8L2gzPgo8dWw+CjxsaT48YSB0YXJnZXQ9Il9ibGFuayIgaHJlZj0iaHR0cHM6Ly9hZG0tYWxlcnRtYW5hZ2VyLWRlZmF1bHQuZXBsLWluZnJhLm5ldCI+ZGVmYXVsdDwvYT48L2xpPjwvdWw+CjxoMz5Db25zdWw8L2gzPgo8dWw+CjxsaT48YSB0YXJnZXQ9Il9ibGFuayIgaHJlZj0iaHR0cHM6Ly9hZG0tY29uc3VsLXVzLXdlc3QuZXBsLWluZnJhLm5ldCI+dXMtd2VzdDwvYT48L2xpPjwvdWw+CjxoMz5HcmFmYW5hPC9oMz4KPHVsPgo8bGk+PGEgdGFyZ2V0PSJfYmxhbmsiIGhyZWY9Imh0dHBzOi8vYWRtLWdyYWZhbmEtbWFpbi5lcGwtaW5mcmEubmV0Ij5tYWluPC9hPjwvbGk+PC91bD4KPGgzPk1pbklPIGNsdXN0ZXJzPC9oMz4KPHVsPgo8bGk+PGEgdGFyZ2V0PSJfYmxhbmsiIGhyZWY9Imh0dHBzOi8vYWRtLW1pbmlvLWdsb2JhbC5lcGwtaW5mcmEubmV0Ij5nbG9iYWw8L2E+PC9saT48L3VsPgo8aDM+Tm9tYWQ8L2gzPgo8dWw+CjxsaT48YSB0YXJnZXQ9Il9ibGFuayIgaHJlZj0iaHR0cHM6Ly9hZG0tbm9tYWQtdXMtd2VzdC5lcGwtaW5mcmEubmV0Ij51cy13ZXN0PC9hPjwvbGk+PC91bD4KPGgzPlByb21ldGhldXMgY2x1c3RlcnM8L2gzPgo8dWw+CjxsaT48YSB0YXJnZXQ9Il9ibGFuayIgaHJlZj0iaHR0cHM6Ly9hZG0tcHJvbWV0aGV1cy1kZWZhdWx0LmVwbC1pbmZyYS5uZXQiPmRlZmF1bHQ8L2E+PC9saT48L3VsPgo8aDM+VmF1bHQ8L2gzPgo8dWw+CjxsaT48YSB0YXJnZXQ9Il9ibGFuayIgaHJlZj0iaHR0cHM6Ly9hZG0tdmF1bHQtdXMtd2VzdC5lcGwtaW5mcmEubmV0Ij51cy13ZXN0PC9hPjwvbGk+PC91bD4KPC9ib2R5Pgo8L2h0bWw+Cg== )
CURRENT_B64=$( consul kv get epl-kv/admin-site-html | gunzip | base64 -w 0 || true )
if [ "$ORIGINAL_B64" != "$CURRENT_B64" ]
then
  THE_VALUE=$( echo -n $ORIGINAL_B64 | base64 -d | gzip -9 | base64 -w 0 )
  consul kv put -base64 epl-kv/admin-site-html $THE_VALUE
else
  echo epl-kv/admin-site-html is up to date
fi
ORIGINAL_B64=$( echo -n  )
CURRENT_B64=$( consul kv get epl-kv/external-elb-conf | gunzip | base64 -w 0 || true )
if [ "$ORIGINAL_B64" != "$CURRENT_B64" ]
then
  THE_VALUE=$( echo -n $ORIGINAL_B64 | base64 -d | gzip -9 | base64 -w 0 )
  consul kv put -base64 epl-kv/external-elb-conf $THE_VALUE
else
  echo epl-kv/external-elb-conf is up to date
fi
